{
  "version": "1.0.0",
  "generatedAt": "2025-07-03T20:27:40.302Z",
  "description": "SKRBL AI Accuracy-Enhanced N8N Workflows with Automated QA",
  "features": [
    "🎯 Real-time accuracy evaluation",
    "🔄 Automatic retry mechanisms",
    "⚠️ Intelligent failure detection",
    "📊 Comprehensive logging",
    "✅ Quality assurance gates"
  ],
  "workflows": {
    "percy-orchestration-master": {
      "name": "Percy - Accuracy Enhanced",
      "nodes": [
        {
          "parameters": {
            "httpMethod": "POST",
            "path": "percy-orchestration-master",
            "responseMode": "responseNode",
            "options": {}
          },
          "id": "webhook-trigger",
          "name": "Webhook Trigger",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [
            240,
            300
          ]
        },
        {
          "parameters": {
            "jsCode": "\n// 🎯 INPUT VALIDATION & PREPROCESSING\nconst inputData = $input.first().json;\nconst executionId = `workflow_${Date.now()}_percy-agent_${Math.random().toString(36).substr(2, 9)}`;\n\nconsole.log('[percy-agent] Starting workflow execution:', executionId);\n\n// Validate required input fields\nif (!inputData.userPrompt) {\n  return [{\n    json: {\n      success: false,\n      error: 'Missing required field: userPrompt',\n      executionId,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\n// Prepare validated input for agent processing\nreturn [{\n  json: {\n    ...inputData,\n    executionId,\n    agentId: 'percy-agent',\n    agentName: 'Percy',\n    workflowId: 'percy-orchestration-master',\n    timestamp: new Date().toISOString(),\n    validationPassed: true\n  }\n}];\n"
          },
          "id": "input-validation",
          "name": "Input Validation",
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            460,
            300
          ]
        },
        {
          "parameters": {
            "resource": "chat",
            "operation": "create",
            "model": "gpt-4",
            "messages": {
              "values": [
                {
                  "role": "system",
                  "content": "You are Percy the Cosmic Concierge, the ultimate AI orchestrator. \nYour superpower is coordinating multiple agents and determining the perfect workflow for any request.\nAnalyze the user's needs and either handle the request directly or recommend the best agent combination.\nAlways be helpful, confident, and strategic in your recommendations.\nIMPORTANT: Always return a JSON response with success, agentRecommendation, and handoffSuggestions fields."
                },
                {
                  "role": "user",
                  "content": "={{ $json.userPrompt }}"
                }
              ]
            },
            "options": {
              "temperature": 0.7,
              "maxTokens": 2000
            }
          },
          "id": "agent-execution",
          "name": "Percy AI Processing",
          "type": "n8n-nodes-base.openAi",
          "typeVersion": 1,
          "position": [
            680,
            300
          ]
        },
        {
          "parameters": {
            "jsCode": "\n// 🧠 RESPONSE PROCESSING & FORMATTING\nconst aiResponse = $input.first().json;\nconst inputData = $('input-validation').first().json;\nconst executionStartTime = new Date(inputData.timestamp).getTime();\nconst executionTimeMs = Date.now() - executionStartTime;\n\nlet processedResult;\ntry {\n  const aiContent = aiResponse.choices[0].message.content;\n  \n  try {\n    processedResult = JSON.parse(aiContent);\n  } catch (parseError) {\n    processedResult = {\n      success: true,\n      result: aiContent,\n      contentType: 'text'\n    };\n  }\n  \n  if (!processedResult.hasOwnProperty('success')) {\n    processedResult.success = true;\n  }\n  \n} catch (error) {\n  processedResult = {\n    success: false,\n    error: error.message,\n    result: null\n  };\n}\n\nconst finalResponse = {\n  ...processedResult,\n  executionId: inputData.executionId,\n  agentId: 'percy-agent',\n  agentName: 'Percy',\n  executionTimeMs,\n  timestamp: new Date().toISOString(),\n  handoffSuggestions: [\n    {\n      agentId: 'analytics-agent',\n      reason: 'Analyze performance and optimize',\n      confidence: 85\n    }\n  ]\n};\n\nreturn [{ json: finalResponse }];\n"
          },
          "id": "response-processing",
          "name": "Response Processing",
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            900,
            300
          ]
        },
        {
          "parameters": {
            "jsCode": "\n// 🎯 ACCURACY EVALUATION ENGINE\nconst agentResponse = $input.first().json;\nconsole.log('[AccuracyEval] Starting accuracy evaluation for:', agentResponse.executionId);\n\nconst requiredFields = ['success'];\nconst minimumAccuracy = 90;\n\nlet accuracyScore = 100;\nlet confidenceScore = 95;\nconst validationErrors = [];\nconst qualityMetrics = {};\n\n// Schema validation\nfor (const field of requiredFields) {\n  if (!agentResponse.hasOwnProperty(field)) {\n    validationErrors.push(`Missing required field: ${field}`);\n    accuracyScore -= 15;\n  }\n}\n\n// Content quality validation\nqualityMetrics.responseSize = JSON.stringify(agentResponse).length;\nqualityMetrics.executionTime = agentResponse.executionTimeMs;\n\nif (agentResponse.error) {\n  validationErrors.push('Response contains error indicators');\n  accuracyScore -= 30;\n}\n\nif (agentResponse.success !== true) {\n  validationErrors.push('Missing or false success indicator');\n  accuracyScore -= 20;\n}\n\nif (agentResponse.executionTimeMs > 30000) {\n  validationErrors.push(`Execution time too long: ${agentResponse.executionTimeMs}ms`);\n  accuracyScore -= 10;\n}\n\naccuracyScore = Math.max(0, Math.min(100, accuracyScore));\nif (validationErrors.length > 0) {\n  confidenceScore = Math.max(60, 95 - validationErrors.length * 10);\n}\n\nlet evaluationStatus = 'pass';\nlet requiresRetry = false;\nlet escalationNeeded = false;\n\nif (accuracyScore < minimumAccuracy) {\n  evaluationStatus = 'fail';\n  escalationNeeded = accuracyScore < 50;\n  requiresRetry = accuracyScore >= 50;\n} else if (accuracyScore < minimumAccuracy + 10) {\n  evaluationStatus = 'warning';\n}\n\nconst evaluationResult = {\n  evaluationId: `eval_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\n  executionId: agentResponse.executionId,\n  agentId: agentResponse.agentId,\n  evaluationStatus,\n  accuracyScore,\n  confidenceScore,\n  validationErrors,\n  qualityMetrics,\n  requiresRetry,\n  escalationNeeded,\n  evaluatedAt: new Date().toISOString()\n};\n\nconsole.log('[AccuracyEval] Evaluation complete:', {\n  status: evaluationStatus,\n  score: accuracyScore,\n  errors: validationErrors.length\n});\n\nreturn [{\n  json: {\n    ...agentResponse,\n    accuracyEvaluation: evaluationResult,\n    qualityAssured: evaluationStatus === 'pass'\n  }\n}];\n"
          },
          "id": "accuracy-evaluation",
          "name": "🎯 Accuracy Evaluation",
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            1120,
            300
          ]
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict"
              },
              "conditions": [
                {
                  "leftValue": "={{ $json.accuracyEvaluation.evaluationStatus }}",
                  "rightValue": "pass",
                  "operator": {
                    "type": "string",
                    "operation": "equals"
                  }
                }
              ]
            },
            "options": {}
          },
          "id": "decision-router",
          "name": "🔀 Quality Gate",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1340,
            300
          ]
        },
        {
          "parameters": {
            "respondWith": "json",
            "responseBody": "={{\n            {\n              success: true,\n              status: \"completed\",\n              executionId: $json.executionId,\n              agentId: $json.agentId,\n              result: $json.result || $json,\n              handoffSuggestions: $json.handoffSuggestions || [],\n              qualityAssurance: {\n                accuracyScore: $json.accuracyEvaluation.accuracyScore,\n                confidenceScore: $json.accuracyEvaluation.confidenceScore,\n                qualityAssured: true\n              },\n              timestamp: $json.timestamp\n            }\n          }}",
            "options": {}
          },
          "id": "success-response",
          "name": "✅ Success Response",
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1,
          "position": [
            1560,
            200
          ]
        },
        {
          "parameters": {
            "respondWith": "json",
            "responseBody": "={{\n            {\n              success: false,\n              status: $json.accuracyEvaluation.requiresRetry ? \"retry_required\" : \"failed\",\n              executionId: $json.executionId,\n              agentId: $json.agentId,\n              error: \"Quality assurance failed\",\n              qualityAssurance: {\n                accuracyScore: $json.accuracyEvaluation.accuracyScore,\n                validationErrors: $json.accuracyEvaluation.validationErrors,\n                requiresRetry: $json.accuracyEvaluation.requiresRetry,\n                escalationNeeded: $json.accuracyEvaluation.escalationNeeded\n              },\n              timestamp: $json.timestamp\n            }\n          }}",
            "options": {}
          },
          "id": "failure-response",
          "name": "❌ Quality Failure",
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1,
          "position": [
            1560,
            400
          ]
        }
      ],
      "connections": {
        "webhook-trigger": {
          "main": [
            [
              {
                "node": "input-validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "input-validation": {
          "main": [
            [
              {
                "node": "agent-execution",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "agent-execution": {
          "main": [
            [
              {
                "node": "response-processing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "response-processing": {
          "main": [
            [
              {
                "node": "accuracy-evaluation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "accuracy-evaluation": {
          "main": [
            [
              {
                "node": "decision-router",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "decision-router": {
          "main": [
            [
              {
                "node": "success-response",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "failure-response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "active": true
    },
    "branding-identity-master": {
      "name": "BrandAlexander - Accuracy Enhanced",
      "nodes": [
        {
          "parameters": {
            "httpMethod": "POST",
            "path": "branding-identity-master",
            "responseMode": "responseNode",
            "options": {}
          },
          "id": "webhook-trigger",
          "name": "Webhook Trigger",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [
            240,
            300
          ]
        },
        {
          "parameters": {
            "jsCode": "\n// 🎯 INPUT VALIDATION & PREPROCESSING\nconst inputData = $input.first().json;\nconst executionId = `workflow_${Date.now()}_branding-agent_${Math.random().toString(36).substr(2, 9)}`;\n\nconsole.log('[branding-agent] Starting workflow execution:', executionId);\n\n// Validate required input fields\nif (!inputData.userPrompt) {\n  return [{\n    json: {\n      success: false,\n      error: 'Missing required field: userPrompt',\n      executionId,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\n// Prepare validated input for agent processing\nreturn [{\n  json: {\n    ...inputData,\n    executionId,\n    agentId: 'branding-agent',\n    agentName: 'BrandAlexander',\n    workflowId: 'branding-identity-master',\n    timestamp: new Date().toISOString(),\n    validationPassed: true\n  }\n}];\n"
          },
          "id": "input-validation",
          "name": "Input Validation",
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            460,
            300
          ]
        },
        {
          "parameters": {
            "resource": "chat",
            "operation": "create",
            "model": "gpt-4",
            "messages": {
              "values": [
                {
                  "role": "system",
                  "content": "You are BrandAlexander the Identity Architect, master of brand creation.\nYour superpower is crafting brand identities that capture essence and drive recognition.\nCreate comprehensive brand strategies, visual guidelines, and identity systems.\nAlways focus on uniqueness, memorability, and market positioning.\nIMPORTANT: Always return a JSON response with success, brandIdentity, and deliverables fields."
                },
                {
                  "role": "user",
                  "content": "={{ $json.userPrompt }}"
                }
              ]
            },
            "options": {
              "temperature": 0.7,
              "maxTokens": 2000
            }
          },
          "id": "agent-execution",
          "name": "BrandAlexander AI Processing",
          "type": "n8n-nodes-base.openAi",
          "typeVersion": 1,
          "position": [
            680,
            300
          ]
        },
        {
          "parameters": {
            "jsCode": "\n// 🧠 RESPONSE PROCESSING & FORMATTING\nconst aiResponse = $input.first().json;\nconst inputData = $('input-validation').first().json;\nconst executionStartTime = new Date(inputData.timestamp).getTime();\nconst executionTimeMs = Date.now() - executionStartTime;\n\nlet processedResult;\ntry {\n  const aiContent = aiResponse.choices[0].message.content;\n  \n  try {\n    processedResult = JSON.parse(aiContent);\n  } catch (parseError) {\n    processedResult = {\n      success: true,\n      result: aiContent,\n      contentType: 'text'\n    };\n  }\n  \n  if (!processedResult.hasOwnProperty('success')) {\n    processedResult.success = true;\n  }\n  \n} catch (error) {\n  processedResult = {\n    success: false,\n    error: error.message,\n    result: null\n  };\n}\n\nconst finalResponse = {\n  ...processedResult,\n  executionId: inputData.executionId,\n  agentId: 'branding-agent',\n  agentName: 'BrandAlexander',\n  executionTimeMs,\n  timestamp: new Date().toISOString(),\n  handoffSuggestions: [\n    {\n      agentId: 'analytics-agent',\n      reason: 'Analyze performance and optimize',\n      confidence: 85\n    }\n  ]\n};\n\nreturn [{ json: finalResponse }];\n"
          },
          "id": "response-processing",
          "name": "Response Processing",
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            900,
            300
          ]
        },
        {
          "parameters": {
            "jsCode": "\n// 🎯 ACCURACY EVALUATION ENGINE\nconst agentResponse = $input.first().json;\nconsole.log('[AccuracyEval] Starting accuracy evaluation for:', agentResponse.executionId);\n\nconst requiredFields = ['success'];\nconst minimumAccuracy = 85;\n\nlet accuracyScore = 100;\nlet confidenceScore = 95;\nconst validationErrors = [];\nconst qualityMetrics = {};\n\n// Schema validation\nfor (const field of requiredFields) {\n  if (!agentResponse.hasOwnProperty(field)) {\n    validationErrors.push(`Missing required field: ${field}`);\n    accuracyScore -= 15;\n  }\n}\n\n// Content quality validation\nqualityMetrics.responseSize = JSON.stringify(agentResponse).length;\nqualityMetrics.executionTime = agentResponse.executionTimeMs;\n\nif (agentResponse.error) {\n  validationErrors.push('Response contains error indicators');\n  accuracyScore -= 30;\n}\n\nif (agentResponse.success !== true) {\n  validationErrors.push('Missing or false success indicator');\n  accuracyScore -= 20;\n}\n\nif (agentResponse.executionTimeMs > 30000) {\n  validationErrors.push(`Execution time too long: ${agentResponse.executionTimeMs}ms`);\n  accuracyScore -= 10;\n}\n\naccuracyScore = Math.max(0, Math.min(100, accuracyScore));\nif (validationErrors.length > 0) {\n  confidenceScore = Math.max(60, 95 - validationErrors.length * 10);\n}\n\nlet evaluationStatus = 'pass';\nlet requiresRetry = false;\nlet escalationNeeded = false;\n\nif (accuracyScore < minimumAccuracy) {\n  evaluationStatus = 'fail';\n  escalationNeeded = accuracyScore < 50;\n  requiresRetry = accuracyScore >= 50;\n} else if (accuracyScore < minimumAccuracy + 10) {\n  evaluationStatus = 'warning';\n}\n\nconst evaluationResult = {\n  evaluationId: `eval_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\n  executionId: agentResponse.executionId,\n  agentId: agentResponse.agentId,\n  evaluationStatus,\n  accuracyScore,\n  confidenceScore,\n  validationErrors,\n  qualityMetrics,\n  requiresRetry,\n  escalationNeeded,\n  evaluatedAt: new Date().toISOString()\n};\n\nconsole.log('[AccuracyEval] Evaluation complete:', {\n  status: evaluationStatus,\n  score: accuracyScore,\n  errors: validationErrors.length\n});\n\nreturn [{\n  json: {\n    ...agentResponse,\n    accuracyEvaluation: evaluationResult,\n    qualityAssured: evaluationStatus === 'pass'\n  }\n}];\n"
          },
          "id": "accuracy-evaluation",
          "name": "🎯 Accuracy Evaluation",
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            1120,
            300
          ]
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict"
              },
              "conditions": [
                {
                  "leftValue": "={{ $json.accuracyEvaluation.evaluationStatus }}",
                  "rightValue": "pass",
                  "operator": {
                    "type": "string",
                    "operation": "equals"
                  }
                }
              ]
            },
            "options": {}
          },
          "id": "decision-router",
          "name": "🔀 Quality Gate",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1340,
            300
          ]
        },
        {
          "parameters": {
            "respondWith": "json",
            "responseBody": "={{\n            {\n              success: true,\n              status: \"completed\",\n              executionId: $json.executionId,\n              agentId: $json.agentId,\n              result: $json.result || $json,\n              handoffSuggestions: $json.handoffSuggestions || [],\n              qualityAssurance: {\n                accuracyScore: $json.accuracyEvaluation.accuracyScore,\n                confidenceScore: $json.accuracyEvaluation.confidenceScore,\n                qualityAssured: true\n              },\n              timestamp: $json.timestamp\n            }\n          }}",
            "options": {}
          },
          "id": "success-response",
          "name": "✅ Success Response",
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1,
          "position": [
            1560,
            200
          ]
        },
        {
          "parameters": {
            "respondWith": "json",
            "responseBody": "={{\n            {\n              success: false,\n              status: $json.accuracyEvaluation.requiresRetry ? \"retry_required\" : \"failed\",\n              executionId: $json.executionId,\n              agentId: $json.agentId,\n              error: \"Quality assurance failed\",\n              qualityAssurance: {\n                accuracyScore: $json.accuracyEvaluation.accuracyScore,\n                validationErrors: $json.accuracyEvaluation.validationErrors,\n                requiresRetry: $json.accuracyEvaluation.requiresRetry,\n                escalationNeeded: $json.accuracyEvaluation.escalationNeeded\n              },\n              timestamp: $json.timestamp\n            }\n          }}",
            "options": {}
          },
          "id": "failure-response",
          "name": "❌ Quality Failure",
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1,
          "position": [
            1560,
            400
          ]
        }
      ],
      "connections": {
        "webhook-trigger": {
          "main": [
            [
              {
                "node": "input-validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "input-validation": {
          "main": [
            [
              {
                "node": "agent-execution",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "agent-execution": {
          "main": [
            [
              {
                "node": "response-processing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "response-processing": {
          "main": [
            [
              {
                "node": "accuracy-evaluation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "accuracy-evaluation": {
          "main": [
            [
              {
                "node": "decision-router",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "decision-router": {
          "main": [
            [
              {
                "node": "success-response",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "failure-response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "active": true
    },
    "analytics-insights-master": {
      "name": "Analytics Don - Accuracy Enhanced",
      "nodes": [
        {
          "parameters": {
            "httpMethod": "POST",
            "path": "analytics-insights-master",
            "responseMode": "responseNode",
            "options": {}
          },
          "id": "webhook-trigger",
          "name": "Webhook Trigger",
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 1,
          "position": [
            240,
            300
          ]
        },
        {
          "parameters": {
            "jsCode": "\n// 🎯 INPUT VALIDATION & PREPROCESSING\nconst inputData = $input.first().json;\nconst executionId = `workflow_${Date.now()}_analytics-agent_${Math.random().toString(36).substr(2, 9)}`;\n\nconsole.log('[analytics-agent] Starting workflow execution:', executionId);\n\n// Validate required input fields\nif (!inputData.userPrompt) {\n  return [{\n    json: {\n      success: false,\n      error: 'Missing required field: userPrompt',\n      executionId,\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\n// Prepare validated input for agent processing\nreturn [{\n  json: {\n    ...inputData,\n    executionId,\n    agentId: 'analytics-agent',\n    agentName: 'Analytics Don',\n    workflowId: 'analytics-insights-master',\n    timestamp: new Date().toISOString(),\n    validationPassed: true\n  }\n}];\n"
          },
          "id": "input-validation",
          "name": "Input Validation",
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            460,
            300
          ]
        },
        {
          "parameters": {
            "resource": "chat",
            "operation": "create",
            "model": "gpt-4",
            "messages": {
              "values": [
                {
                  "role": "system",
                  "content": "You are Analytics Don the Data Detective, master of insights and predictions.\nYour superpower is analyzing data and predicting trends with 95% accuracy.\nProvide actionable insights, performance recommendations, and strategic data analysis.\nAlways include specific metrics and next steps.\nIMPORTANT: Always return a JSON response with success, insights, recommendations, and dataAccuracy fields."
                },
                {
                  "role": "user",
                  "content": "={{ $json.userPrompt }}"
                }
              ]
            },
            "options": {
              "temperature": 0.7,
              "maxTokens": 2000
            }
          },
          "id": "agent-execution",
          "name": "Analytics Don AI Processing",
          "type": "n8n-nodes-base.openAi",
          "typeVersion": 1,
          "position": [
            680,
            300
          ]
        },
        {
          "parameters": {
            "jsCode": "\n// 🧠 RESPONSE PROCESSING & FORMATTING\nconst aiResponse = $input.first().json;\nconst inputData = $('input-validation').first().json;\nconst executionStartTime = new Date(inputData.timestamp).getTime();\nconst executionTimeMs = Date.now() - executionStartTime;\n\nlet processedResult;\ntry {\n  const aiContent = aiResponse.choices[0].message.content;\n  \n  try {\n    processedResult = JSON.parse(aiContent);\n  } catch (parseError) {\n    processedResult = {\n      success: true,\n      result: aiContent,\n      contentType: 'text'\n    };\n  }\n  \n  if (!processedResult.hasOwnProperty('success')) {\n    processedResult.success = true;\n  }\n  \n} catch (error) {\n  processedResult = {\n    success: false,\n    error: error.message,\n    result: null\n  };\n}\n\nconst finalResponse = {\n  ...processedResult,\n  executionId: inputData.executionId,\n  agentId: 'analytics-agent',\n  agentName: 'Analytics Don',\n  executionTimeMs,\n  timestamp: new Date().toISOString(),\n  handoffSuggestions: [\n    {\n      agentId: 'analytics-agent',\n      reason: 'Analyze performance and optimize',\n      confidence: 85\n    }\n  ]\n};\n\nreturn [{ json: finalResponse }];\n"
          },
          "id": "response-processing",
          "name": "Response Processing",
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            900,
            300
          ]
        },
        {
          "parameters": {
            "jsCode": "\n// 🎯 ACCURACY EVALUATION ENGINE\nconst agentResponse = $input.first().json;\nconsole.log('[AccuracyEval] Starting accuracy evaluation for:', agentResponse.executionId);\n\nconst requiredFields = ['success'];\nconst minimumAccuracy = 95;\n\nlet accuracyScore = 100;\nlet confidenceScore = 95;\nconst validationErrors = [];\nconst qualityMetrics = {};\n\n// Schema validation\nfor (const field of requiredFields) {\n  if (!agentResponse.hasOwnProperty(field)) {\n    validationErrors.push(`Missing required field: ${field}`);\n    accuracyScore -= 15;\n  }\n}\n\n// Content quality validation\nqualityMetrics.responseSize = JSON.stringify(agentResponse).length;\nqualityMetrics.executionTime = agentResponse.executionTimeMs;\n\nif (agentResponse.error) {\n  validationErrors.push('Response contains error indicators');\n  accuracyScore -= 30;\n}\n\nif (agentResponse.success !== true) {\n  validationErrors.push('Missing or false success indicator');\n  accuracyScore -= 20;\n}\n\nif (agentResponse.executionTimeMs > 30000) {\n  validationErrors.push(`Execution time too long: ${agentResponse.executionTimeMs}ms`);\n  accuracyScore -= 10;\n}\n\naccuracyScore = Math.max(0, Math.min(100, accuracyScore));\nif (validationErrors.length > 0) {\n  confidenceScore = Math.max(60, 95 - validationErrors.length * 10);\n}\n\nlet evaluationStatus = 'pass';\nlet requiresRetry = false;\nlet escalationNeeded = false;\n\nif (accuracyScore < minimumAccuracy) {\n  evaluationStatus = 'fail';\n  escalationNeeded = accuracyScore < 50;\n  requiresRetry = accuracyScore >= 50;\n} else if (accuracyScore < minimumAccuracy + 10) {\n  evaluationStatus = 'warning';\n}\n\nconst evaluationResult = {\n  evaluationId: `eval_${Date.now()}_${Math.random().toString(36).substr(2, 6)}`,\n  executionId: agentResponse.executionId,\n  agentId: agentResponse.agentId,\n  evaluationStatus,\n  accuracyScore,\n  confidenceScore,\n  validationErrors,\n  qualityMetrics,\n  requiresRetry,\n  escalationNeeded,\n  evaluatedAt: new Date().toISOString()\n};\n\nconsole.log('[AccuracyEval] Evaluation complete:', {\n  status: evaluationStatus,\n  score: accuracyScore,\n  errors: validationErrors.length\n});\n\nreturn [{\n  json: {\n    ...agentResponse,\n    accuracyEvaluation: evaluationResult,\n    qualityAssured: evaluationStatus === 'pass'\n  }\n}];\n"
          },
          "id": "accuracy-evaluation",
          "name": "🎯 Accuracy Evaluation",
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            1120,
            300
          ]
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict"
              },
              "conditions": [
                {
                  "leftValue": "={{ $json.accuracyEvaluation.evaluationStatus }}",
                  "rightValue": "pass",
                  "operator": {
                    "type": "string",
                    "operation": "equals"
                  }
                }
              ]
            },
            "options": {}
          },
          "id": "decision-router",
          "name": "🔀 Quality Gate",
          "type": "n8n-nodes-base.if",
          "typeVersion": 1,
          "position": [
            1340,
            300
          ]
        },
        {
          "parameters": {
            "respondWith": "json",
            "responseBody": "={{\n            {\n              success: true,\n              status: \"completed\",\n              executionId: $json.executionId,\n              agentId: $json.agentId,\n              result: $json.result || $json,\n              handoffSuggestions: $json.handoffSuggestions || [],\n              qualityAssurance: {\n                accuracyScore: $json.accuracyEvaluation.accuracyScore,\n                confidenceScore: $json.accuracyEvaluation.confidenceScore,\n                qualityAssured: true\n              },\n              timestamp: $json.timestamp\n            }\n          }}",
            "options": {}
          },
          "id": "success-response",
          "name": "✅ Success Response",
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1,
          "position": [
            1560,
            200
          ]
        },
        {
          "parameters": {
            "respondWith": "json",
            "responseBody": "={{\n            {\n              success: false,\n              status: $json.accuracyEvaluation.requiresRetry ? \"retry_required\" : \"failed\",\n              executionId: $json.executionId,\n              agentId: $json.agentId,\n              error: \"Quality assurance failed\",\n              qualityAssurance: {\n                accuracyScore: $json.accuracyEvaluation.accuracyScore,\n                validationErrors: $json.accuracyEvaluation.validationErrors,\n                requiresRetry: $json.accuracyEvaluation.requiresRetry,\n                escalationNeeded: $json.accuracyEvaluation.escalationNeeded\n              },\n              timestamp: $json.timestamp\n            }\n          }}",
            "options": {}
          },
          "id": "failure-response",
          "name": "❌ Quality Failure",
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1,
          "position": [
            1560,
            400
          ]
        }
      ],
      "connections": {
        "webhook-trigger": {
          "main": [
            [
              {
                "node": "input-validation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "input-validation": {
          "main": [
            [
              {
                "node": "agent-execution",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "agent-execution": {
          "main": [
            [
              {
                "node": "response-processing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "response-processing": {
          "main": [
            [
              {
                "node": "accuracy-evaluation",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "accuracy-evaluation": {
          "main": [
            [
              {
                "node": "decision-router",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "decision-router": {
          "main": [
            [
              {
                "node": "success-response",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "failure-response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "active": true
    }
  }
}