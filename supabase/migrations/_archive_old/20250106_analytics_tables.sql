-- Migration: Analytics Tables for Phase 2
-- Description: Creates tables for user funnel tracking, journeys, and performance monitoring
-- Generated by Cursor AI Assistant on 2025-01-06

-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- ============================================================================
-- 1. user_funnel_events - Track all user interactions and events
-- ============================================================================
CREATE TABLE IF NOT EXISTS user_funnel_events (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  event_type TEXT NOT NULL CHECK (event_type IN (
    'page_view', 'signup_start', 'signup_complete', 'signin_start', 'signin_complete',
    'agent_view', 'agent_launch', 'workflow_complete', 'upgrade_view', 'upgrade_complete',
    'trial_start', 'trial_convert', 'churn', 'feature_use'
  )),
  user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
  session_id TEXT NOT NULL,
  page_path TEXT,
  agent_id TEXT,
  workflow_id TEXT,
  feature_name TEXT,
  conversion_value DECIMAL(10,2),
  metadata JSONB DEFAULT '{}',
  timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  user_agent TEXT,
  referrer TEXT,
  utm_source TEXT,
  utm_medium TEXT,
  utm_campaign TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_funnel_events_timestamp ON user_funnel_events(timestamp DESC);
CREATE INDEX IF NOT EXISTS idx_funnel_events_user_id ON user_funnel_events(user_id);
CREATE INDEX IF NOT EXISTS idx_funnel_events_session_id ON user_funnel_events(session_id);
CREATE INDEX IF NOT EXISTS idx_funnel_events_event_type ON user_funnel_events(event_type);
CREATE INDEX IF NOT EXISTS idx_funnel_events_agent_id ON user_funnel_events(agent_id) WHERE agent_id IS NOT NULL;
CREATE INDEX IF NOT EXISTS idx_funnel_events_utm_source ON user_funnel_events(utm_source) WHERE utm_source IS NOT NULL;

-- ============================================================================
-- 2. user_journeys - Cached user journey data for real-time analytics
-- ============================================================================
CREATE TABLE IF NOT EXISTS user_journeys (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  session_id TEXT NOT NULL,
  events JSONB DEFAULT '[]',
  start_time TIMESTAMPTZ NOT NULL,
  end_time TIMESTAMPTZ,
  total_duration INTEGER, -- in milliseconds
  conversion_events INTEGER DEFAULT 0,
  last_active_agent TEXT,
  user_tier TEXT DEFAULT 'starter',
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Indexes for user journeys
CREATE INDEX IF NOT EXISTS idx_user_journeys_user_id ON user_journeys(user_id);
CREATE INDEX IF NOT EXISTS idx_user_journeys_session_id ON user_journeys(session_id);
CREATE INDEX IF NOT EXISTS idx_user_journeys_start_time ON user_journeys(start_time DESC);
CREATE INDEX IF NOT EXISTS idx_user_journeys_user_tier ON user_journeys(user_tier);

-- ============================================================================
-- 3. agent_performance_metrics - Real-time agent performance tracking
-- ============================================================================
CREATE TABLE IF NOT EXISTS agent_performance_metrics (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  agent_id TEXT NOT NULL,
  agent_name TEXT NOT NULL,
  date DATE NOT NULL DEFAULT CURRENT_DATE,
  total_launches INTEGER DEFAULT 0,
  successful_completions INTEGER DEFAULT 0,
  failed_executions INTEGER DEFAULT 0,
  average_execution_time INTEGER, -- in milliseconds
  user_satisfaction_score DECIMAL(3,2), -- 0.00 to 5.00
  total_revenue_generated DECIMAL(10,2) DEFAULT 0,
  unique_users INTEGER DEFAULT 0,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  
  UNIQUE(agent_id, date)
);

-- Indexes for agent performance
CREATE INDEX IF NOT EXISTS idx_agent_performance_agent_id ON agent_performance_metrics(agent_id);
CREATE INDEX IF NOT EXISTS idx_agent_performance_date ON agent_performance_metrics(date DESC);
CREATE INDEX IF NOT EXISTS idx_agent_performance_launches ON agent_performance_metrics(total_launches DESC);

-- ============================================================================
-- 4. system_health_metrics - Platform performance monitoring
-- ============================================================================
CREATE TABLE IF NOT EXISTS system_health_metrics (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  metric_type TEXT NOT NULL CHECK (metric_type IN (
    'api_response_time', 'webhook_success_rate', 'database_query_time',
    'error_rate', 'active_users', 'concurrent_sessions', 'memory_usage', 'cpu_usage'
  )),
  metric_value DECIMAL(10,4) NOT NULL,
  metric_unit TEXT NOT NULL, -- 'ms', 'percent', 'count', 'mb', etc.
  component TEXT, -- 'api', 'database', 'n8n', 'supabase', etc.
  timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  metadata JSONB DEFAULT '{}'
);

-- Indexes for system health
CREATE INDEX IF NOT EXISTS idx_system_health_timestamp ON system_health_metrics(timestamp DESC);
CREATE INDEX IF NOT EXISTS idx_system_health_metric_type ON system_health_metrics(metric_type);
CREATE INDEX IF NOT EXISTS idx_system_health_component ON system_health_metrics(component) WHERE component IS NOT NULL;

-- ============================================================================
-- 5. cohort_analysis - User cohort tracking for retention analysis
-- ============================================================================
CREATE TABLE IF NOT EXISTS cohort_analysis (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  cohort_month DATE NOT NULL, -- First day of the month when user signed up
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  signup_date DATE NOT NULL,
  retention_week_1 BOOLEAN DEFAULT FALSE,
  retention_week_2 BOOLEAN DEFAULT FALSE,
  retention_week_4 BOOLEAN DEFAULT FALSE,
  retention_week_8 BOOLEAN DEFAULT FALSE,
  retention_week_12 BOOLEAN DEFAULT FALSE,
  last_active_date DATE,
  total_sessions INTEGER DEFAULT 0,
  total_agent_launches INTEGER DEFAULT 0,
  total_revenue DECIMAL(10,2) DEFAULT 0,
  user_tier TEXT DEFAULT 'starter',
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  
  UNIQUE(user_id)
);

-- Indexes for cohort analysis
CREATE INDEX IF NOT EXISTS idx_cohort_analysis_cohort_month ON cohort_analysis(cohort_month);
CREATE INDEX IF NOT EXISTS idx_cohort_analysis_user_id ON cohort_analysis(user_id);
CREATE INDEX IF NOT EXISTS idx_cohort_analysis_signup_date ON cohort_analysis(signup_date);

-- ============================================================================
-- RLS POLICIES
-- ============================================================================

-- Enable RLS on all tables
ALTER TABLE user_funnel_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_journeys ENABLE ROW LEVEL SECURITY;
ALTER TABLE agent_performance_metrics ENABLE ROW LEVEL SECURITY;
ALTER TABLE system_health_metrics ENABLE ROW LEVEL SECURITY;
ALTER TABLE cohort_analysis ENABLE ROW LEVEL SECURITY;

-- user_funnel_events policies
CREATE POLICY "Users can view their own funnel events" ON user_funnel_events
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Service role full access on funnel events" ON user_funnel_events
  FOR ALL USING (auth.jwt() ->> 'role' = 'service_role');

-- user_journeys policies
CREATE POLICY "Users can view their own journeys" ON user_journeys
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Service role full access on journeys" ON user_journeys
  FOR ALL USING (auth.jwt() ->> 'role' = 'service_role');

-- agent_performance_metrics policies (admin only)
CREATE POLICY "Service role full access on agent performance" ON agent_performance_metrics
  FOR ALL USING (auth.jwt() ->> 'role' = 'service_role');

-- system_health_metrics policies (admin only)
CREATE POLICY "Service role full access on system health" ON system_health_metrics
  FOR ALL USING (auth.jwt() ->> 'role' = 'service_role');

-- cohort_analysis policies
CREATE POLICY "Users can view their own cohort data" ON cohort_analysis
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Service role full access on cohort analysis" ON cohort_analysis
  FOR ALL USING (auth.jwt() ->> 'role' = 'service_role');

-- ============================================================================
-- GRANTS
-- ============================================================================

-- Grant permissions to authenticated users
GRANT SELECT ON user_funnel_events TO authenticated;
GRANT SELECT ON user_journeys TO authenticated;

-- Grant permissions to service role
GRANT ALL ON user_funnel_events TO service_role;
GRANT ALL ON user_journeys TO service_role;
GRANT ALL ON agent_performance_metrics TO service_role;
GRANT ALL ON system_health_metrics TO service_role;
GRANT ALL ON cohort_analysis TO service_role;

-- ============================================================================
-- FUNCTIONS FOR ANALYTICS
-- ============================================================================

-- Function to update agent performance metrics
CREATE OR REPLACE FUNCTION update_agent_performance_metrics()
RETURNS TRIGGER AS $$
BEGIN
  -- Only process agent-related events
  IF NEW.agent_id IS NOT NULL AND NEW.event_type IN ('agent_launch', 'workflow_complete') THEN
    INSERT INTO agent_performance_metrics (
      agent_id, 
      agent_name, 
      date,
      total_launches,
      successful_completions
    )
    VALUES (
      NEW.agent_id,
      COALESCE(NEW.metadata->>'agent_name', NEW.agent_id),
      DATE(NEW.timestamp),
      CASE WHEN NEW.event_type = 'agent_launch' THEN 1 ELSE 0 END,
      CASE WHEN NEW.event_type = 'workflow_complete' THEN 1 ELSE 0 END
    )
    ON CONFLICT (agent_id, date) 
    DO UPDATE SET
      total_launches = agent_performance_metrics.total_launches + 
        CASE WHEN NEW.event_type = 'agent_launch' THEN 1 ELSE 0 END,
      successful_completions = agent_performance_metrics.successful_completions + 
        CASE WHEN NEW.event_type = 'workflow_complete' THEN 1 ELSE 0 END,
      updated_at = NOW();
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to automatically update agent performance metrics
CREATE TRIGGER trigger_update_agent_performance
  AFTER INSERT ON user_funnel_events
  FOR EACH ROW
  EXECUTE FUNCTION update_agent_performance_metrics();

-- Function to update cohort analysis
CREATE OR REPLACE FUNCTION update_cohort_analysis()
RETURNS TRIGGER AS $$
BEGIN
  -- Only process signup_complete events
  IF NEW.event_type = 'signup_complete' AND NEW.user_id IS NOT NULL THEN
    INSERT INTO cohort_analysis (
      cohort_month,
      user_id,
      signup_date,
      user_tier
    )
    VALUES (
      DATE_TRUNC('month', NEW.timestamp)::DATE,
      NEW.user_id,
      DATE(NEW.timestamp),
      COALESCE(NEW.metadata->>'user_tier', 'starter')
    )
    ON CONFLICT (user_id) DO NOTHING;
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to automatically update cohort analysis
CREATE TRIGGER trigger_update_cohort_analysis
  AFTER INSERT ON user_funnel_events
  FOR EACH ROW
  EXECUTE FUNCTION update_cohort_analysis();

-- Comments
COMMENT ON TABLE user_funnel_events IS 'Tracks all user interactions and events for funnel analysis';
COMMENT ON TABLE user_journeys IS 'Cached user journey data for real-time analytics and personalization';
COMMENT ON TABLE agent_performance_metrics IS 'Daily aggregated metrics for agent performance monitoring';
COMMENT ON TABLE system_health_metrics IS 'System performance and health monitoring metrics';
COMMENT ON TABLE cohort_analysis IS 'User cohort tracking for retention and lifecycle analysis'; 