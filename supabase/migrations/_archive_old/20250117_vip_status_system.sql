-- VIP Status System Tables\n-- Created to support VIP user tracking and tier management\n\n-- Table for storing user VIP status\nCREATE TABLE IF NOT EXISTS user_vip_status (\n    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,\n    vip_tier TEXT NOT NULL CHECK (vip_tier IN ('gold', 'platinum', 'diamond')),\n    vip_code_used TEXT,\n    activated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),\n    expires_at TIMESTAMP WITH TIME ZONE,\n    status TEXT NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'suspended', 'expired')),\n    features_unlocked JSONB DEFAULT '{}',\n    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),\n    UNIQUE(user_id)\n);\n\n-- Table for VIP feature usage tracking\nCREATE TABLE IF NOT EXISTS vip_feature_usage (\n    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,\n    vip_tier TEXT NOT NULL,\n    feature_name TEXT NOT NULL,\n    usage_count INTEGER DEFAULT 1,\n    metadata JSONB DEFAULT '{}',\n    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()\n);\n\n-- Table for VIP code management\nCREATE TABLE IF NOT EXISTS vip_codes (\n    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n    code TEXT UNIQUE NOT NULL,\n    vip_tier TEXT NOT NULL CHECK (vip_tier IN ('gold', 'platinum', 'diamond')),\n    max_uses INTEGER DEFAULT 1,\n    current_uses INTEGER DEFAULT 0,\n    expires_at TIMESTAMP WITH TIME ZONE,\n    is_active BOOLEAN DEFAULT TRUE,\n    created_by UUID REFERENCES auth.users(id),\n    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),\n    metadata JSONB DEFAULT '{}'\n);\n\n-- Table for VIP benefits and permissions\nCREATE TABLE IF NOT EXISTS vip_tier_benefits (\n    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n    vip_tier TEXT NOT NULL CHECK (vip_tier IN ('gold', 'platinum', 'diamond')),\n    benefit_key TEXT NOT NULL,\n    benefit_name TEXT NOT NULL,\n    benefit_description TEXT,\n    limit_value INTEGER,\n    limit_type TEXT CHECK (limit_type IN ('monthly', 'daily', 'total', 'unlimited')),\n    is_active BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),\n    UNIQUE(vip_tier, benefit_key)\n);\n\n-- Indexes for performance\nCREATE INDEX IF NOT EXISTS idx_user_vip_status_user_id ON user_vip_status(user_id);\nCREATE INDEX IF NOT EXISTS idx_user_vip_status_tier ON user_vip_status(vip_tier);\nCREATE INDEX IF NOT EXISTS idx_user_vip_status_status ON user_vip_status(status);\nCREATE INDEX IF NOT EXISTS idx_vip_feature_usage_user_id ON vip_feature_usage(user_id);\nCREATE INDEX IF NOT EXISTS idx_vip_feature_usage_feature ON vip_feature_usage(feature_name);\nCREATE INDEX IF NOT EXISTS idx_vip_codes_code ON vip_codes(code);\nCREATE INDEX IF NOT EXISTS idx_vip_codes_active ON vip_codes(is_active);\n\n-- Insert default VIP tier benefits\nINSERT INTO vip_tier_benefits (vip_tier, benefit_key, benefit_name, benefit_description, limit_value, limit_type) VALUES\n-- Gold Tier Benefits\n('gold', 'priority_support', 'Priority Support', 'Get priority customer support with faster response times', NULL, 'unlimited'),\n('gold', 'enhanced_agents', 'Enhanced Agent Access', 'Access to 6 premium AI agents', 6, 'total'),\n('gold', 'early_access', 'Early Feature Access', 'Get early access to new features before general release', NULL, 'unlimited'),\n('gold', 'priority_queue', 'Priority Processing', 'Skip regular queues for faster processing', NULL, 'unlimited'),\n('gold', 'advanced_insights', 'Advanced Analytics', 'Access to detailed performance insights and analytics', NULL, 'unlimited'),\n\n-- Platinum Tier Benefits\n('platinum', 'premium_support', 'Premium Support', 'White-glove customer support with dedicated account manager', NULL, 'unlimited'),\n('platinum', 'automation_suite', 'Advanced Automation', 'Full access to automation workflows and cross-agent orchestration', NULL, 'unlimited'),\n('platinum', 'beta_access', 'Beta Features', 'Access to beta features and experimental capabilities', NULL, 'unlimited'),\n('platinum', 'advanced_analytics', 'Premium Analytics', 'Advanced business intelligence and predictive analytics', NULL, 'unlimited'),\n('platinum', 'unlimited_agents', 'Unlimited Agents', 'Access to all available AI agents without restrictions', NULL, 'unlimited'),\n\n-- Diamond Tier Benefits\n('diamond', 'concierge_service', 'Concierge Service', 'Personal AI consultant and concierge service', NULL, 'unlimited'),\n('diamond', 'unlimited_access', 'Unlimited Everything', 'Unlimited access to all features, agents, and capabilities', NULL, 'unlimited'),\n('diamond', 'predictive_intelligence', 'Predictive Intelligence', 'AI-powered business forecasting and market predictions', NULL, 'unlimited'),\n('diamond', 'custom_integrations', 'Custom Integrations', 'Custom API integrations and workflow development', NULL, 'unlimited'),\n('diamond', 'priority_processing', 'Instant Processing', 'Immediate processing with no queues or delays', NULL, 'unlimited');\n\n-- Insert default VIP codes\nINSERT INTO vip_codes (code, vip_tier, max_uses, expires_at, metadata) VALUES\n('SKRBL-VIP-GOLD-2024', 'gold', 100, '2025-12-31 23:59:59', '{\"campaign\": \"2024_launch\"}'),\n('PERCY-GOLDEN-KEY', 'gold', 50, '2025-12-31 23:59:59', '{\"campaign\": \"percy_special\"}'),\n('ELITE-ACCESS-2024', 'gold', 100, '2025-12-31 23:59:59', '{\"campaign\": \"elite_access\"}'),\n('PERCY-EXCLUSIVE-PLATINUM', 'platinum', 25, '2025-12-31 23:59:59', '{\"campaign\": \"platinum_exclusive\"}'),\n('SKRBL-PREMIUM-2024', 'platinum', 50, '2025-12-31 23:59:59', '{\"campaign\": \"premium_launch\"}'),\n('VIP-PLATINUM-PERCY', 'platinum', 25, '2025-12-31 23:59:59', '{\"campaign\": \"vip_platinum\"}'),\n('SKRBL-DIAMOND-ELITE', 'diamond', 10, '2025-12-31 23:59:59', '{\"campaign\": \"diamond_elite\"}'),\n('PERCY-DIAMOND-2024', 'diamond', 10, '2025-12-31 23:59:59', '{\"campaign\": \"percy_diamond\"}'),\n('ULTIMATE-VIP-ACCESS', 'diamond', 5, '2025-12-31 23:59:59', '{\"campaign\": \"ultimate_access\"}');\n\n-- Function to check VIP status\nCREATE OR REPLACE FUNCTION get_user_vip_status(user_uuid UUID)\nRETURNS TABLE (\n    vip_tier TEXT,\n    status TEXT,\n    activated_at TIMESTAMP WITH TIME ZONE,\n    expires_at TIMESTAMP WITH TIME ZONE\n) AS $$\nBEGIN\n    RETURN QUERY\n    SELECT \n        uvs.vip_tier,\n        uvs.status,\n        uvs.activated_at,\n        uvs.expires_at\n    FROM user_vip_status uvs\n    WHERE uvs.user_id = user_uuid\n    AND uvs.status = 'active'\n    AND (uvs.expires_at IS NULL OR uvs.expires_at > NOW());\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Function to validate VIP code\nCREATE OR REPLACE FUNCTION validate_vip_code(code_input TEXT)\nRETURNS TABLE (\n    is_valid BOOLEAN,\n    vip_tier TEXT,\n    remaining_uses INTEGER\n) AS $$\nDECLARE\n    code_record RECORD;\nBEGIN\n    SELECT * INTO code_record\n    FROM vip_codes\n    WHERE code = code_input\n    AND is_active = TRUE\n    AND (expires_at IS NULL OR expires_at > NOW())\n    AND current_uses < max_uses;\n    \n    IF code_record IS NULL THEN\n        RETURN QUERY SELECT FALSE, NULL::TEXT, 0;\n    ELSE\n        RETURN QUERY SELECT TRUE, code_record.vip_tier, (code_record.max_uses - code_record.current_uses);\n    END IF;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Trigger to update updated_at timestamp\nCREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;\n\nCREATE TRIGGER update_user_vip_status_updated_at\n    BEFORE UPDATE ON user_vip_status\n    FOR EACH ROW\n    EXECUTE FUNCTION update_updated_at_column(); 