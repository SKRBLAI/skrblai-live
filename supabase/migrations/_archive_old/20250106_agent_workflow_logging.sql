-- Migration: Agent Workflow Logging Tables
-- Description: Adds tables for logging agent workflow executions, requests, and errors.
-- Generated by Cursor AI Assistant on 2025-01-06

-- Enable pgcrypto for UUID generation if not already enabled
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- ============================================================================
-- 1. agent_workflow_executions
-- ============================================================================
CREATE TABLE IF NOT EXISTS agent_workflow_executions (
  execution_id TEXT PRIMARY KEY,
  agent_id TEXT NOT NULL,
  agent_name TEXT NOT NULL,
  superhero_name TEXT NOT NULL,
  n8n_workflow_id TEXT,
  user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
  user_role TEXT NOT NULL DEFAULT 'client',
  session_id TEXT,
  user_prompt TEXT,
  workflow_capabilities JSONB NOT NULL DEFAULT '{}',
  estimated_duration INTEGER,
  status TEXT NOT NULL DEFAULT 'running' CHECK (status IN ('running', 'completed', 'failed', 'queued', 'triggered')),
  success BOOLEAN,
  error_message TEXT,
  previous_agent TEXT,
  handoff_reason TEXT,
  timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Indexes for faster look-ups
CREATE INDEX IF NOT EXISTS idx_aw_exec_agent_id ON agent_workflow_executions(agent_id);
CREATE INDEX IF NOT EXISTS idx_aw_exec_user_id ON agent_workflow_executions(user_id);
CREATE INDEX IF NOT EXISTS idx_aw_exec_timestamp ON agent_workflow_executions(timestamp);
CREATE INDEX IF NOT EXISTS idx_aw_exec_status ON agent_workflow_executions(status);

-- Enable Row Level Security
ALTER TABLE agent_workflow_executions ENABLE ROW LEVEL SECURITY;

-- Allow users to view their own execution logs
CREATE POLICY "Users can view own workflow executions" ON agent_workflow_executions
  FOR SELECT USING (user_id = auth.uid());

-- Allow users to insert their own execution logs (service function)
CREATE POLICY "Users can insert own workflow executions" ON agent_workflow_executions
  FOR INSERT WITH CHECK (user_id = auth.uid());

-- Service role has full access
CREATE POLICY "Service role full access to aw_executions" ON agent_workflow_executions
  FOR ALL USING (auth.role() = 'service_role');

GRANT SELECT, INSERT ON agent_workflow_executions TO authenticated;
GRANT ALL ON agent_workflow_executions TO service_role;

-- ============================================================================
-- 2. agent_workflow_requests
-- ============================================================================
CREATE TABLE IF NOT EXISTS agent_workflow_requests (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  agent_id TEXT NOT NULL,
  agent_name TEXT NOT NULL,
  superhero_name TEXT NOT NULL,
  user_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,
  user_role TEXT NOT NULL DEFAULT 'client',
  session_id TEXT,
  user_prompt TEXT,
  has_workflow BOOLEAN NOT NULL DEFAULT TRUE,
  requires_premium BOOLEAN NOT NULL DEFAULT FALSE,
  workflow_capabilities JSONB NOT NULL DEFAULT '{}',
  request_metadata JSONB NOT NULL DEFAULT '{}',
  timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Indexes
CREATE INDEX IF NOT EXISTS idx_aw_req_agent_id ON agent_workflow_requests(agent_id);
CREATE INDEX IF NOT EXISTS idx_aw_req_user_id ON agent_workflow_requests(user_id);
CREATE INDEX IF NOT EXISTS idx_aw_req_timestamp ON agent_workflow_requests(timestamp);

-- RLS
ALTER TABLE agent_workflow_requests ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Users can view own workflow requests" ON agent_workflow_requests
  FOR SELECT USING (user_id = auth.uid());

CREATE POLICY "Users can insert own workflow requests" ON agent_workflow_requests
  FOR INSERT WITH CHECK (user_id = auth.uid());

CREATE POLICY "Service role full access to aw_requests" ON agent_workflow_requests
  FOR ALL USING (auth.role() = 'service_role');

GRANT SELECT, INSERT ON agent_workflow_requests TO authenticated;
GRANT ALL ON agent_workflow_requests TO service_role;

-- ============================================================================
-- 3. agent_workflow_errors
-- ============================================================================
CREATE TABLE IF NOT EXISTS agent_workflow_errors (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  agent_id TEXT NOT NULL,
  error_message TEXT NOT NULL,
  error_stack TEXT,
  request_url TEXT,
  request_method TEXT,
  ip_address TEXT,
  user_agent TEXT,
  timestamp TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Indexes
CREATE INDEX IF NOT EXISTS idx_aw_err_agent_id ON agent_workflow_errors(agent_id);
CREATE INDEX IF NOT EXISTS idx_aw_err_timestamp ON agent_workflow_errors(timestamp);

-- RLS (read-only for service role / admins)
ALTER TABLE agent_workflow_errors ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Service role can read workflow errors" ON agent_workflow_errors
  FOR SELECT USING (auth.role() = 'service_role');

CREATE POLICY "Service role can insert workflow errors" ON agent_workflow_errors
  FOR INSERT WITH CHECK (auth.role() = 'service_role');

-- Note: Regular authenticated users should not access error logs.

GRANT SELECT, INSERT ON agent_workflow_errors TO service_role; 