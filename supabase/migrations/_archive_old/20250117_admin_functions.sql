-- Admin Functions for SKRBL AI\n-- Creates necessary admin functions that were referenced but never implemented\n\n-- Function to check if user is admin\nCREATE OR REPLACE FUNCTION is_admin(user_id UUID)\nRETURNS BOOLEAN AS $$\nDECLARE\n    user_role TEXT;\nBEGIN\n    -- Check if user has admin role in user_roles table\n    SELECT role INTO user_role\n    FROM user_roles\n    WHERE user_id = $1\n    AND role = 'admin'\n    LIMIT 1;\n    \n    RETURN user_role IS NOT NULL;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Function to check if user is VIP\nCREATE OR REPLACE FUNCTION is_vip(user_id UUID)\nRETURNS BOOLEAN AS $$\nDECLARE\n    vip_status TEXT;\nBEGIN\n    -- Check if user has active VIP status\n    SELECT status INTO vip_status\n    FROM user_vip_status\n    WHERE user_id = $1\n    AND status = 'active'\n    AND (expires_at IS NULL OR expires_at > NOW())\n    LIMIT 1;\n    \n    RETURN vip_status IS NOT NULL;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Create user_roles table if it doesn't exist\nCREATE TABLE IF NOT EXISTS user_roles (\n    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,\n    role TEXT NOT NULL CHECK (role IN ('admin', 'user', 'moderator')),\n    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),\n    UNIQUE(user_id, role)\n);\n\n-- Insert admin users (update with actual admin user IDs)\n-- You'll need to replace these UUIDs with actual user IDs from your auth.users table\n-- Example:\n-- INSERT INTO user_roles (user_id, role) VALUES \n-- ('your-admin-user-id-here', 'admin')\n-- ON CONFLICT (user_id, role) DO NOTHING;\n\n-- Grant necessary permissions\nGRANT USAGE ON SCHEMA public TO authenticated;\nGRANT EXECUTE ON FUNCTION is_admin TO authenticated;\nGRANT EXECUTE ON FUNCTION is_vip TO authenticated;\n\n-- Row Level Security for user_roles\nALTER TABLE user_roles ENABLE ROW LEVEL SECURITY;\n\n-- Policy for user_roles - users can only see their own roles\nCREATE POLICY \"Users can view own roles\" ON user_roles\n    FOR SELECT USING (auth.uid() = user_id);\n\n-- Policy for admins to manage all roles\nCREATE POLICY \"Admins can manage all roles\" ON user_roles\n    FOR ALL USING (is_admin(auth.uid()));\n\n-- Indexes for performance\nCREATE INDEX IF NOT EXISTS idx_user_roles_user_id ON user_roles(user_id);\nCREATE INDEX IF NOT EXISTS idx_user_roles_role ON user_roles(role); 